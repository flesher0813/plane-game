Microsoft (R) Macro Assembler Version 14.16.27032.1	    10/24/19 15:29:49
gameTry.asm						     Page 1 - 1


				include Irvine16.inc
			      C ; Irvine16.inc - Include file for programs using
			      C ; the Irvine16.lib (Real-address mode library).
			      C 
			      C ; Last update: 7/29/05
			      C 
			      C .NOLIST
			      C .LIST
			      C 
 = 0006				mode_06 = 6 ;640 * 200, 2color
 = 000D				mode_0d = 0dh ;320 * 200, 16color
 = 000E				mode_0e = 0eh ;640 * 200, 16color
 = 000F				mode_0f = 0fh ;640 * 350, 2color
 = 0010				mode_10 = 10h ;640 * 350, 16color
 = 0011				mode_11 = 11h ;640 * 480, 2color
 = 0012				mode_12 = 12h ;640 * 480, 2color
 = 0013				mode_13 = 13h ;320 * 200, 2color
 = 006A				mode_6a = 6ah ;800 * 600, 2color


 0000				.data
 0000 00				savepage byte ?
 0001 47 20 41 20 4D 20			gamestring byte "G A M E"
       45

 0008 0000				normal_word_segment word ?
 = A000					video_segment = 0a000h
 = 03C8					output_port = 3c8h
 = 03C9					input_port = 3c9h
 000A 0000				xval word ?
 000C 0000				yval word ?
 = 0002					setcolorback_index = 2
 = 0001					color_index = 1

 = 0014					mybulletmax = 20
 000E  0014 [				mybullets dword mybulletmax dup('$$')
        00002424
       ]

 0000				.code
					assume cs:@code,ds:@data
					setmodel proto modeltype:byte
					drawline proto myred:byte,mygreen:byte,myblue:byte,search_port:byte,x:word,y:word

 0000					main proc
 0000  B8 ---- R				mov ax,@data
 0003  8E D8					mov ds,ax

						invoke setmodel,mode_13
 000A  E8 002C					call setbackground

 000D  C7 06 000A R 00A0			mov xval,160
 0013  C7 06 000C R 0064			mov yval,100

 0019  E8 01C7					call waitforstart
						exit
 0020					main endp

 0020					setmodel proc modeltype:byte
 0023  B4 0F					mov ah,0fh
 0025  CD 10					int 10h
 0027  A2 0000 R				mov savepage,al

 002A  B4 00					mov ah,0
 002C  8A 46 04					mov al,modeltype
 002F  CD 10					int 10h

						;mov normal_word_segment,es
 0031  68 A000					push video_segment;super important
 0034  07					pop es

						ret
 0039					setmodel endp

 0039					setbackground proc
 0039  BA 03C8					mov dx,output_port
 003C  B0 00					mov al,0
 003E  EE					out dx,al

 003F  BA 03C9					mov dx,input_port
 0042  B0 00					mov al,0
 0044  EE					out dx,al
 0045  B0 00					mov al,0
 0047  EE					out dx,al
 0048  B0 23					mov al,35
 004A  EE					out dx,al
 004B  C3					ret
 004C					setbackground endp

 004C					drawline proc myred:byte,mygreen:byte,myblue:byte,search_port:byte,x:word,y:word
 004F  BA 03C8					mov dx,output_port
 0052  8A 46 0A					mov al,search_port
 0055  EE					out dx,al

 0056  BA 03C9					mov dx,input_port
 0059  8A 46 04					mov al,myred
 005C  EE					out dx,al
 005D  8A 46 06					mov al,mygreen
 0060  EE					out dx,al
 0061  8A 46 08					mov al,myblue
 0064  EE					out dx,al

 0065  B8 0140					mov ax,320
 0068  F7 66 0E					mul y
 006B  03 46 0C					add ax,x

 006E  B9 000A					mov cx,10
 0071  8B F8					mov di,ax
 0073  8A 46 0A					mov al,search_port
 0076					DP1:
 0076  26: 88 05				mov byte ptr es:[di],al
 0079  81 C7 0140				add di,320
 007D  E2 F7					loop DP1

						ret
 0083					drawline endp

 0083					shoot proc
 0083  55					push bp
 0084  8B EC					mov bp,sp

 0086  BE 000E R				mov si,offset mybullets
 0089  B9 0014					mov cx,mybulletmax
 008C						s0:
 008C  81 3C 2424					cmp word ptr [si],'$$'
 0090  74 02						jz gotposition
 0092  EB 13						jmp nextposition

 0094							gotposition:
 0094  8B 1E 000A R						mov bx,xval
 0098  89 1C							mov word ptr [si],bx
 009A  8B 1E 000C R						mov bx,yval
 009E  89 5C 02							mov word ptr [si + 2],bx
 00A1  83 6C 02 0F						sub word ptr [si + 2],15
 00A5  EB 05							jmp squit

 00A7							nextposition:
 00A7  83 C6 04							add si,type mybullets
 00AA  E2 E0							loop s0
 00AC					squit:
						invoke drawline,63,63,63,color_index,word ptr [si],word ptr [si + 2]
 00BC  8B E5					mov sp,bp
 00BE  5D					pop bp
 00BF  C3					ret
 00C0					shoot endp

 00C0					move proc
 00C0  55					push bp
 00C1  8B EC					mov bp,sp

 00C3  BE 000E R				mov si,offset mybullets
 00C6  B9 0014					mov cx,mybulletmax
 00C9					L1:
 00C9  51					push cx
 00CA  81 3C 2424				cmp word ptr [si],'$$'
 00CE  74 45					jz again
						
 00D0						L2:
							invoke drawline,0,0,35,setcolorback_index,word ptr [si],word ptr [si + 2]
 00E0  83 6C 02 05					sub word ptr [si + 2],5
							invoke drawline,63,63,63,color_index,word ptr [si],word ptr [si + 2]

 00F4  83 7C 02 0A					cmp word ptr [si + 2],10
 00F8  72 02						jb changebullet
 00FA  EB 19						jmp again

 00FC						changebullet:
							invoke drawline,0,0,35,setcolorback_index,word ptr [si],word ptr [si + 2]
 010C  C7 04 2424					mov word ptr [si],'$$'
 0110  C7 44 02 2424					mov word ptr [si + 2],'$$'

 0115						again:
 0115  83 C6 04						add si,4
 0118  59						pop cx
 0119  E2 AE						loop L1

 011B  8B E5					mov sp,bp
 011D  5D					pop bp
 011E  C3					ret
 011F					move endp

 011F					checkthekey proc
 011F  8A D0					mov dl,al

						.if dl == 77h || dl == 57h;w
 012B  EB 37						jmp gotw

						.elseif dl == 73h || dl == 53h;s
 0139  EB 43						jmp gots

						.elseif dl == 61h || dl == 41h;a
 0147  EB 4F						jmp gota

						.elseif dl == 64h || dl == 44h;d
 0155  EB 5B						jmp gotd

						.elseif dl == 20h
 015E  EB 7F						jmp shootnow

						.else
 0162  EB 7E						jmp quit
						.endif

 0164						gotw:
							invoke drawline,0,0,35,setcolorback_index,xval,yval
 0177  83 2E 000C R 05					sub yval,5
 017C  EB 4C						jmp gotnewposition
						
 017E						gots:
							invoke drawline,0,0,35,setcolorback_index,xval,yval
 0191  83 06 000C R 05					add yval,5
 0196  EB 32						jmp gotnewposition

 0198						gota:
							invoke drawline,0,0,35,setcolorback_index,xval,yval
 01AB  83 2E 000A R 05					sub xval,5
 01B0  EB 18						jmp gotnewposition

 01B2						gotd:
							invoke drawline,0,0,35,setcolorback_index,xval,yval
 01C5  83 06 000A R 05					add xval,5
							
 01CA						gotnewposition:
							invoke drawline,63,63,63,color_index,xval,yval
 01DD  EB 03						jmp quit

 01DF						shootnow:
 01DF  E8 FEA1						call shoot

 01E2						quit:
 01E2  C3						ret
						
 01E3					checkthekey endp

 01E3					waitforstart proc
						invoke drawline,63,63,63,color_index,xval,yval

 01F6  B4 03					mov ah,3
 01F8  B0 05					mov al,5
 01FA  B7 00					mov bh,0
 01FC  CD 16					int 16h
 01FE						L0:
 01FE  66| B8 00000096					mov eax,150
 0204  E8 0000 E					call delay
 0207  B4 11						mov ah,11h
 0209  CD 16						int 16h
 020B  74 16						jz nokeypressed
 020D  B4 10						mov ah,10h
 020F  CD 16						int 16h
 0211  8A D0						mov dl,al
								.if dl == 27 ;esc
 0218  B4 00								mov ah,0
 021A  A0 0000 R							mov al,savepage
 021D  CD 10								int 10h
 021F  C3								ret
								.endif
 0220  E8 FEFC							call checkthekey
 0223							nokeypressed:
 0223  E8 FE9A							call move
 0226  EB D6							jmp L0

 0228					waitforstart endp

					end main
Microsoft (R) Macro Assembler Version 14.16.27032.1	    10/24/19 15:29:49
gameTry.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CursorPosStruc . . . . . . . . .	 0002
  Ycoord . . . . . . . . . . . .	 0000	     Byte
  Xcoord . . . . . . . . . . . .	 0001	     Byte
ExtGetDskFreSpcStruc . . . . . .	 002C
  StructSize . . . . . . . . . .	 0000	     Word
  Level  . . . . . . . . . . . .	 0002	     Word
  SectorsPerCluster  . . . . . .	 0004	     DWord
  BytesPerSector . . . . . . . .	 0008	     DWord
  AvailableClusters  . . . . . .	 000C	     DWord
  TotalClusters  . . . . . . . .	 0010	     DWord
  AvailablePhysSectors . . . . .	 0014	     DWord
  TotalPhysSectors . . . . . . .	 0018	     DWord
  AvailableAllocationUnits . . .	 001C	     DWord
  TotalAllocationUnits . . . . .	 0020	     DWord
  Rsvd . . . . . . . . . . . . .	 0024	     DWord
FPU_ENVIRON  . . . . . . . . . .	 001C
  controlWord  . . . . . . . . .	 0000	     Word
  statusWord . . . . . . . . . .	 0004	     Word
  tagWord  . . . . . . . . . . .	 0008	     Word
  instrPtrLow  . . . . . . . . .	 000C	     Word
  opcodeAndInstrPtrHi  . . . . .	 0010	     DWord
  operandPtrLow  . . . . . . . .	 0014	     Word
  operandPtrHi . . . . . . . . .	 0018	     DWord
TimeRecord . . . . . . . . . . .	 0004
  hours  . . . . . . . . . . . .	 0000	     Byte
  minutes  . . . . . . . . . . .	 0001	     Byte
  seconds  . . . . . . . . . . .	 0002	     Byte
  hhss . . . . . . . . . . . . .	 0003	     Byte
VideoInfoStruc . . . . . . . . .	 0041
  supportedInfoPtr . . . . . . .	 0000	     DWord
  videoMode  . . . . . . . . . .	 0004	     Byte
  numCharColumns . . . . . . . .	 0005	     Word
  videoBufferLen . . . . . . . .	 0007	     Word
  videoBufferStartPtr  . . . . .	 0009	     Word
  cursors  . . . . . . . . . . .	 000B	     Word
  cursorStartLine  . . . . . . .	 001B	     Byte
  cursorEndLine  . . . . . . . .	 001C	     Byte
  activeDisplayPage  . . . . . .	 001D	     Byte
  adapterBasePortAddr  . . . . .	 001E	     Word
  currentRegister3B8or3D8  . . .	 0020	     Byte
  currentRegister3B9or3D9  . . .	 0021	     Byte
  numCharRows  . . . . . . . . .	 0022	     Byte
  characterScanHeight  . . . . .	 0023	     Word
  activeDisplayCode  . . . . . .	 0025	     Byte
  inactiveDisplayCode  . . . . .	 0026	     Byte
  numberOfColors . . . . . . . .	 0027	     Word
  numberOfVideoPages . . . . . .	 0029	     Byte
  numberOfScanLines  . . . . . .	 002A	     Word
  primaryCharBlock . . . . . . .	 002C	     Byte
  secondaryCharBlock . . . . . .	 002D	     Byte
  miscStateInfo  . . . . . . . .	 002E	     Byte
  videoMemAvail  . . . . . . . .	 0032	     Byte
  savePointerStateInfo . . . . .	 0033	     Byte


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

DGROUP . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	16 Bit	 005E	  Word	  Public  'DATA'	
STACK  . . . . . . . . . . . . .	16 Bit	 0200	  Para	  Stack	  'STACK'	 
_TEXT  . . . . . . . . . . . . .	16 Bit	 0228	  Word	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

Clrscr . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
GetCommandtail . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
checkthekey  . . . . . . . . . .	P Near	 011F	  _TEXT	Length= 00C4 Public STDCALL
  gotw . . . . . . . . . . . . .	L Near	 0164	  _TEXT	
  gots . . . . . . . . . . . . .	L Near	 017E	  _TEXT	
  gota . . . . . . . . . . . . .	L Near	 0198	  _TEXT	
  gotd . . . . . . . . . . . . .	L Near	 01B2	  _TEXT	
  gotnewposition . . . . . . . .	L Near	 01CA	  _TEXT	
  shootnow . . . . . . . . . . .	L Near	 01DF	  _TEXT	
  quit . . . . . . . . . . . . .	L Near	 01E2	  _TEXT	
drawline . . . . . . . . . . . .	P Near	 004C	  _TEXT	Length= 0037 Public STDCALL
  myred  . . . . . . . . . . . .	Byte	 bp + 0004
  mygreen  . . . . . . . . . . .	Byte	 bp + 0006
  myblue . . . . . . . . . . . .	Byte	 bp + 0008
  search_port  . . . . . . . . .	Byte	 bp + 000A
  x  . . . . . . . . . . . . . .	Word	 bp + 000C
  y  . . . . . . . . . . . . . .	Word	 bp + 000E
  DP1  . . . . . . . . . . . . .	L Near	 0076	  _TEXT	
main . . . . . . . . . . . . . .	P Near	 0000	  _TEXT	Length= 0020 Public STDCALL
move . . . . . . . . . . . . . .	P Near	 00C0	  _TEXT	Length= 005F Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00C9	  _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00D0	  _TEXT	
  changebullet . . . . . . . . .	L Near	 00FC	  _TEXT	
  again  . . . . . . . . . . . .	L Near	 0115	  _TEXT	
setbackground  . . . . . . . . .	P Near	 0039	  _TEXT	Length= 0013 Public STDCALL
setmodel . . . . . . . . . . . .	P Near	 0020	  _TEXT	Length= 0019 Public STDCALL
  modeltype  . . . . . . . . . .	Byte	 bp + 0004
shoot  . . . . . . . . . . . . .	P Near	 0083	  _TEXT	Length= 003D Public STDCALL
  s0 . . . . . . . . . . . . . .	L Near	 008C	  _TEXT	
  gotposition  . . . . . . . . .	L Near	 0094	  _TEXT	
  nextposition . . . . . . . . .	L Near	 00A7	  _TEXT	
  squit  . . . . . . . . . . . .	L Near	 00AC	  _TEXT	
waitforstart . . . . . . . . . .	P Near	 01E3	  _TEXT	Length= 0045 Public STDCALL
  L0 . . . . . . . . . . . . . .	L Near	 01FE	  _TEXT	
  nokeypressed . . . . . . . . .	L Near	 0223	  _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 0000h	 
@DataSize  . . . . . . . . . . .	Number	 0000h	 
@Interface . . . . . . . . . . .	Number	 0003h	 
@Model . . . . . . . . . . . . .	Number	 0002h	 
@cmdline . . . . . . . . . . . .	Text   	 OFFSET __98765765cmdline
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 DGROUP
@fardata?  . . . . . . . . . . .	Text   	 FAR_BSS
@fardata . . . . . . . . . . . .	Text   	 FAR_DATA
@stack . . . . . . . . . . . . .	Text   	 DGROUP
ACTION_CREATED_OPENED  . . . . .	Number	 0002h	 
ACTION_OPENED  . . . . . . . . .	Number	 0001h	 
ACTION_REPLACED_OPENED . . . . .	Number	 0003h	 
FILE_CREATE  . . . . . . . . . .	Number	 0010h	 
FILE_OPEN  . . . . . . . . . . .	Number	 0001h	 
FILE_TRUNCATE  . . . . . . . . .	Number	 0002h	 
LIGHT_BLUE . . . . . . . . . . .	Number	 0009h	 
LIGHT_CYAN . . . . . . . . . . .	Number	 000Bh	 
LIGHT_GRAY . . . . . . . . . . .	Number	 0007h	 
LIGHT_GREEN  . . . . . . . . . .	Number	 000Ah	 
LIGHT_MAGENTA  . . . . . . . . .	Number	 000Dh	 
LIGHT_RED  . . . . . . . . . . .	Number	 000Ch	 
OPEN_ACCESS_READONLY . . . . . .	Number	 0000h	 
OPEN_ACCESS_READWRITE  . . . . .	Number	 0002h	 
OPEN_ACCESS_RO_NOMODLASTACCESS .	Number	 0004h	 
OPEN_ACCESS_WRITEONLY  . . . . .	Number	 0001h	 
OPEN_FLAGS_ALIAS_HINT  . . . . .	Number	 0400h	 
OPEN_FLAGS_COMMIT  . . . . . . .	Number	 4000h	 
OPEN_FLAGS_NOCRITERR . . . . . .	Number	 2000h	 
OPEN_FLAGS_NOINHERIT . . . . . .	Number	 0080h	 
OPEN_FLAGS_NO_BUFFERING  . . . .	Number	 0100h	 
OPEN_FLAGS_NO_COMPRESS . . . . .	Number	 0200h	 
OPEN_SHARE_COMPATIBLE  . . . . .	Number	 0000h	 
OPEN_SHARE_DENYNONE  . . . . . .	Number	 0040h	 
OPEN_SHARE_DENYREADWRITE . . . .	Number	 0010h	 
OPEN_SHARE_DENYREAD  . . . . . .	Number	 0030h	 
OPEN_SHARE_DENYWRITE . . . . . .	Number	 0020h	 
_A_ARCH  . . . . . . . . . . . .	Number	 0020h	 
_A_HIDDEN  . . . . . . . . . . .	Number	 0002h	 
_A_NORMAL  . . . . . . . . . . .	Number	 0000h	 
_A_RDONLY  . . . . . . . . . . .	Number	 0001h	 
_A_SYSTEM  . . . . . . . . . . .	Number	 0004h	 
_A_VOLID . . . . . . . . . . . .	Number	 0008h	 
black  . . . . . . . . . . . . .	Number	 0000h	 
blue . . . . . . . . . . . . . .	Number	 0001h	 
brown  . . . . . . . . . . . . .	Number	 0006h	 
color_index  . . . . . . . . . .	Number	 0001h	 
cyan . . . . . . . . . . . . . .	Number	 0003h	 
exit . . . . . . . . . . . . . .	Text   	 .EXIT
gamestring . . . . . . . . . . .	Byte	 0001	  _DATA	
gray . . . . . . . . . . . . . .	Number	 0008h	 
green  . . . . . . . . . . . . .	Number	 0002h	 
input_port . . . . . . . . . . .	Number	 03C9h	 
lightBlue  . . . . . . . . . . .	Number	 0009h	 
lightCyan  . . . . . . . . . . .	Number	 000Bh	 
lightGray  . . . . . . . . . . .	Number	 0007h	 
lightGreen . . . . . . . . . . .	Number	 000Ah	 
lightMagenta . . . . . . . . . .	Number	 000Dh	 
lightRed . . . . . . . . . . . .	Number	 000Ch	 
magenta  . . . . . . . . . . . .	Number	 0005h	 
mode_06  . . . . . . . . . . . .	Number	 0006h	 
mode_0d  . . . . . . . . . . . .	Number	 000Dh	 
mode_0e  . . . . . . . . . . . .	Number	 000Eh	 
mode_0f  . . . . . . . . . . . .	Number	 000Fh	 
mode_10  . . . . . . . . . . . .	Number	 0010h	 
mode_11  . . . . . . . . . . . .	Number	 0011h	 
mode_12  . . . . . . . . . . . .	Number	 0012h	 
mode_13  . . . . . . . . . . . .	Number	 0013h	 
mode_6a  . . . . . . . . . . . .	Number	 006Ah	 
mybulletmax  . . . . . . . . . .	Number	 0014h	 
mybullets  . . . . . . . . . . .	DWord	 000E	  _DATA	
normal_word_segment  . . . . . .	Word	 0008	  _DATA	
output_port  . . . . . . . . . .	Number	 03C8h	 
red  . . . . . . . . . . . . . .	Number	 0004h	 
savepage . . . . . . . . . . . .	Byte	 0000	  _DATA	
setcolorback_index . . . . . . .	Number	 0002h	 
video_segment  . . . . . . . . .	Number	 A000h	 
white  . . . . . . . . . . . . .	Number	 000Fh	 
xval . . . . . . . . . . . . . .	Word	 000A	  _DATA	
yellow . . . . . . . . . . . . .	Number	 000Eh	 
yval . . . . . . . . . . . . . .	Word	 000C	  _DATA	

	   0 Warnings
	   0 Errors
